"""
Leetcode 104: Maximum Depth of Binary Tree
This is a binary tree problem.
The goal is to find the maximum depth of the binary tree.
The depth of a node is the number of edges from the node to the root.
The maximum depth is the maximum depth of all the nodes in the tree.

For example, the maximum depth of the following tree is 3:
    3
   / \
  9  20
     / \
    15  7

If a tree is empty, the maximum depth is 0.
If a tree has only one node, the maximum depth is 1: both of its left and right
subtrees are empty. So, the maximum depth is max(0, 0) + 1 = 1.
If the tree has two children, and both of them are leaves, the maximum depth is 
max(1, 1) + 1 = 2.
"""
from typing import Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

"""
Solution 1: Recursive traversal
Time complexity: O(n)
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.res = 0 # I can't use the instance function name as the instance variable
        self.depth = 0

    def maxDepth(self, root: Optional[TreeNode]) -> int:
        self.traverse(root)
        return self.res # If I use self.maxDepth as instance variable, in here, it would return a function.
    
    def traverse(self, root):
        # Always start with the base case
        if not root:
            return
        self.depth += 1 # Whenever we enter a new node, we increment the depth.
        # The result return is okay in here or after the recursion traverse,
        # because we are using the instance variable self.res.
        # But not after self.depth -= 1.
        if root.left is None and root.right is None:
            self.res = max(self.res, self.depth) # If we reach a leaf node, we update the result.
        self.traverse(root.left)
        self.traverse(root.right)
        self.depth -= 1 # Whenever we leave a node, we decrement the depth.

"""
Solution 2: Divide and conquer. We solve the subproblems recursively.
"""
class Solution2:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        # We divide the problem into two subproblems: the max of the left and 
        # right subtrees.
        leftDepth = self.maxDepth(root.left)
        rightDepth = self.maxDepth(root.right)
        # We conquer the problem by returning the max of the left and right 
        # subtrees plus 1 (the current node).
        # Even if it's leaf node, we still need to return 1.
        return max(leftDepth, rightDepth) + 1


